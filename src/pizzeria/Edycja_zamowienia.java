/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pizzeria;

import java.awt.Checkbox;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
//import javafx.scene.control.Button;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Wika
 */
public class Edycja_zamowienia extends javax.swing.JFrame {

    Connection con;
    Statement stmt1, stmt2, stmt3, stmt4, stmt5, stmt6;
    ResultSet res1, res2, res3, res4, res5;
    DefaultTableModel model;
    DefaultListModel<String> model1 = new DefaultListModel<>();
    static Zamowienia zam;
    boolean realizuj;

    /**
     * Creates new form Edycja_zamowienia
     */
    public Edycja_zamowienia(Zamowienia zam) {
        this.zam = zam;
        initComponents();

        panel_tabelka.setVisible(false);
        model = (DefaultTableModel) tabelka.getModel();
        tabelka.setAutoCreateRowSorter(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_tabelka = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelka = new javax.swing.JTable();
        zrealizuj = new javax.swing.JButton();
        usun = new javax.swing.JButton();
        anreal = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        lista = new javax.swing.JList();
        napis = new javax.swing.JLabel();
        ost = new javax.swing.JToggleButton();
        zreal = new javax.swing.JToggleButton();
        niezreal = new javax.swing.JToggleButton();
        nadpis = new javax.swing.JLabel();
        pracowniki = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        wszzam = new javax.swing.JToggleButton();
        przegladaj = new javax.swing.JToggleButton();
        powrot = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1370, 720));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panel_tabelka.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabelka.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NR", "Klient", "Pracownik", "Data zamówienia", "Forma opłaty", "Forma zamówienia", "Wartość", "Stan realizacji"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelka.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelkaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelka);
        if (tabelka.getColumnModel().getColumnCount() > 0) {
            tabelka.getColumnModel().getColumn(0).setMinWidth(50);
            tabelka.getColumnModel().getColumn(0).setPreferredWidth(50);
            tabelka.getColumnModel().getColumn(0).setMaxWidth(50);
            tabelka.getColumnModel().getColumn(1).setMinWidth(150);
            tabelka.getColumnModel().getColumn(1).setPreferredWidth(150);
            tabelka.getColumnModel().getColumn(1).setMaxWidth(150);
            tabelka.getColumnModel().getColumn(2).setMinWidth(150);
            tabelka.getColumnModel().getColumn(2).setPreferredWidth(150);
            tabelka.getColumnModel().getColumn(2).setMaxWidth(150);
            tabelka.getColumnModel().getColumn(3).setMinWidth(130);
            tabelka.getColumnModel().getColumn(3).setPreferredWidth(130);
            tabelka.getColumnModel().getColumn(3).setMaxWidth(130);
            tabelka.getColumnModel().getColumn(4).setMinWidth(100);
            tabelka.getColumnModel().getColumn(4).setPreferredWidth(100);
            tabelka.getColumnModel().getColumn(4).setMaxWidth(100);
            tabelka.getColumnModel().getColumn(5).setMinWidth(130);
            tabelka.getColumnModel().getColumn(5).setPreferredWidth(130);
            tabelka.getColumnModel().getColumn(5).setMaxWidth(130);
            tabelka.getColumnModel().getColumn(6).setMinWidth(100);
            tabelka.getColumnModel().getColumn(6).setPreferredWidth(100);
            tabelka.getColumnModel().getColumn(6).setMaxWidth(100);
            tabelka.getColumnModel().getColumn(7).setMinWidth(100);
            tabelka.getColumnModel().getColumn(7).setPreferredWidth(100);
            tabelka.getColumnModel().getColumn(7).setMaxWidth(100);
        }

        panel_tabelka.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, 910, 280));

        zrealizuj.setText("Zrealizuj");
        zrealizuj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zrealizujActionPerformed(evt);
            }
        });
        panel_tabelka.add(zrealizuj, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 320, 180, 40));

        usun.setText("Usuń");
        usun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usunActionPerformed(evt);
            }
        });
        panel_tabelka.add(usun, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 320, 160, 40));

        anreal.setText("Anuluj realizację");
        anreal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anrealActionPerformed(evt);
            }
        });
        panel_tabelka.add(anreal, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 320, 170, 40));

        jScrollPane3.setViewportView(lista);

        panel_tabelka.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 30, 330, 280));

        napis.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        napis.setText("Zamówiono");
        panel_tabelka.add(napis, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 0, 150, 20));

        ost.setText("Pokaż ostatnie");
        ost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ostActionPerformed(evt);
            }
        });
        panel_tabelka.add(ost, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 450, 220, 50));

        zreal.setText("Pokaż zrealizowane");
        zreal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zrealActionPerformed(evt);
            }
        });
        panel_tabelka.add(zreal, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 420, 220, 50));

        niezreal.setText("Pokaż niezrealizowane");
        niezreal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                niezrealActionPerformed(evt);
            }
        });
        panel_tabelka.add(niezreal, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 480, 220, 50));

        nadpis.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        nadpis.setText("*- żeby posortować dane kliknij na nagłówek tablicy;");
        panel_tabelka.add(nadpis, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 10, 430, -1));

        pracowniki.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pracownikiActionPerformed(evt);
            }
        });
        panel_tabelka.add(pracowniki, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 460, 200, 30));

        jLabel1.setText("Wyszukaj zamówienia pracownika:");
        panel_tabelka.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 430, 200, 30));

        wszzam.setText("Pokaż wszystkie");
        wszzam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wszzamActionPerformed(evt);
            }
        });
        panel_tabelka.add(wszzam, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 450, 160, 50));

        getContentPane().add(panel_tabelka, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 1380, 620));

        przegladaj.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        przegladaj.setText("Przeglądaj wszystkie zamówienia przyjęte do realizacji");
        przegladaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                przegladajActionPerformed(evt);
            }
        });
        getContentPane().add(przegladaj, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 440, 60));

        powrot.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        powrot.setText("Powrót");
        powrot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powrotActionPerformed(evt);
            }
        });
        getContentPane().add(powrot, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 40, 190, 60));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void zrealizujActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zrealizujActionPerformed

        if (tabelka.getSelectedRowCount() > 0) {
            int i = tabelka.getSelectedRow();
            String nr = tabelka.getValueAt(i, 0).toString();
            try {
                con = DriverManager.getConnection(
                        "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
                );
                stmt5 = con.createStatement();
                stmt5.executeUpdate("UPDATE zamowienie SET zrealizowane='T' where id_zam=" + nr);
                czysctabelke();
                wyswietldane(model);
            } catch (SQLException ex) {
            }
        } else {
            JOptionPane.showMessageDialog(null, "Nie wybrano wiersza!");
        }
    }//GEN-LAST:event_zrealizujActionPerformed

    private void usunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usunActionPerformed

        int j = tabelka.getRowCount();
        String ostt = tabelka.getValueAt(j - 1, 0).toString();
        int ost = Integer.parseInt(ostt);
        if (tabelka.getSelectedRowCount() > 0) {
            model1.removeAllElements();
            lista.setModel(model1);
            int wiersz = tabelka.getSelectedRow();
            String s = tabelka.getValueAt(wiersz, 0).toString();
            try {
                con = DriverManager.getConnection(
                        "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
                );
                stmt5 = con.createStatement();

                stmt5.executeUpdate(
                        "delete from szcz_o_skl where id_szcz_o_pizzy in "
                        + "(select id_szcz_o_pizzy from szcz_o_pizzy where id_zam=" + s + ")"
                );
                int id1 = Integer.parseInt(s);
                id1++;
                for (int i = id1; i <= ost; i++) {
                    String naprawid = "UPDATE szcz_o_skl SET id_szcz_o_pizzy =" + (i - 1) + " WHERE id_zam =" + i;
                    stmt5.executeUpdate(naprawid);
                }
                stmt5.executeUpdate(
                        "delete from szcz_o_pizzy where id_zam=" + s
                );
                stmt5.executeUpdate(
                        "delete from szcz_o_napoju where id_zam=" + s
                );
                stmt5.executeUpdate(
                        "delete from zamowienie where id_zam=" + s
                );
            } catch (SQLException ex) {
                Logger.getLogger(NoweZamLok.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Nie wybrano wiersza!");
        }
        czysctabelke();
        wyswietldane(model);
    }//GEN-LAST:event_usunActionPerformed

    private void anrealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anrealActionPerformed
        if (tabelka.getSelectedRowCount() > 0) {
            int i = tabelka.getSelectedRow();
            String nr = tabelka.getValueAt(i, 0).toString();
            try {
                con = DriverManager.getConnection(
                        "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
                );
                stmt5 = con.createStatement();
                stmt5.executeUpdate("UPDATE zamowienie SET zrealizowane='N' where id_zam=" + nr);
                czysctabelke();
                wyswietldane(model);
            } catch (SQLException ex) {
            }
        } else {
            JOptionPane.showMessageDialog(null, "Nie wybrano wiersza!");
        }
    }//GEN-LAST:event_anrealActionPerformed

    private void przegladajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_przegladajActionPerformed
        if (przegladaj.isSelected() == true) {
            panel_tabelka.setVisible(true);
            czysctabelke();
            wyswietldane(model);
            pracowniki.removeAllItems();
            uzupelnijlisty();
        } else {
            panel_tabelka.setVisible(false);
        }
    }//GEN-LAST:event_przegladajActionPerformed

    private void powrotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powrotActionPerformed
        zam.setVisible(true);
        dispose();
    }//GEN-LAST:event_powrotActionPerformed

    private void tabelkaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelkaMouseClicked

        if (tabelka.getSelectedRowCount() > 0) {
            model1.removeAllElements();
            lista.setModel(model1);
            int i = tabelka.getSelectedRow();
            String nr = tabelka.getValueAt(i, 0).toString();
            int numer = Integer.parseInt(nr);
            dodajpizzedozamowienia(numer);
            dodajnapojdozamowienia(numer);

            int j = tabelka.getColumnModel().getSelectionModel().getLeadSelectionIndex();

        }
    }//GEN-LAST:event_tabelkaMouseClicked

    private void ostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ostActionPerformed
        model1.removeAllElements();
        lista.setModel(model1);
        if (ost.isSelected()) {
            wszzam.setSelected(false);
            czysctabelke();
            wyswietldane(model);
        } else {
            czysctabelke();
            wyswietldane(model);
        }
    }//GEN-LAST:event_ostActionPerformed

    private void zrealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zrealActionPerformed
        model1.removeAllElements();
        lista.setModel(model1);
        if (zreal.isSelected()) {
            niezreal.setSelected(false);
            wszzam.setSelected(false);
            czysctabelke();
            wyswietldane(model);
        } else {
            czysctabelke();
            wyswietldane(model);
        }
    }//GEN-LAST:event_zrealActionPerformed

    private void niezrealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_niezrealActionPerformed
        model1.removeAllElements();
        lista.setModel(model1);
        if (niezreal.isSelected()) {
            zreal.setSelected(false);
            wszzam.setSelected(false);
            czysctabelke();
            wyswietldane(model);
        } else {
            czysctabelke();
            wyswietldane(model);
        }
    }//GEN-LAST:event_niezrealActionPerformed

    private void pracownikiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pracownikiActionPerformed
        model1.removeAllElements();
        lista.setModel(model1);
        int i = pracowniki.getSelectedIndex();
        wszzam.setSelected(false);
        if (i > 0) {
            czysctabelke();
            wyswietldane(model);
            wszzam.setSelected(false);

        } else {
            czysctabelke();
            wyswietldane(model);
        }

    }//GEN-LAST:event_pracownikiActionPerformed

    private void wszzamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wszzamActionPerformed
        model1.removeAllElements();
        lista.setModel(model1);
        zreal.setSelected(false);
        niezreal.setSelected(false);
        ost.setSelected(false);
        uzupelnijlisty();
        czysctabelke();
        wyswietldane(model);
    }//GEN-LAST:event_wszzamActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Edycja_zamowienia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
         //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Edycja_zamowienia(zam).setVisible(true);
            }
        });
    }

    void uzupelnijlisty() {
        pracowniki.removeAllItems();
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt4 = con.createStatement();
            res4 = stmt4.executeQuery(
                    "select * from pracownicy"
            );
        } catch (Exception e) {
        }
        try {
            if (pracowniki.getItemCount() == 0) {
                pracowniki.addItem("");
                while (res4.next()) {
                    pracowniki.addItem(res4.getString("login"));
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(NoweZamLok.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void dodajnapojdozamowienia(int numer) {
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt3 = con.createStatement();
            res3 = stmt3.executeQuery(
                    "select * from ZAMOWIENIE Z join SZCZ_O_NAPOJU AS N on Z.ID_ZAM=N.ID_ZAM"
                    + " join MENU_NAPOJE AS M on N.ID_NAPOJU=M.ID_NAPOJU"
                    + " where Z.id_zam=" + numer
            );
            while (res3.next()) {
                int ilenapojow = res3.getInt("ile_sztuk_nap");
                String napoj = ilenapojow + "";
                napoj += "x " + res3.getString("nazwa_napoju");
                model1.addElement(napoj);
            }
            lista.setModel(model1);
        } catch (SQLException ex) {

        }
    }

    void dodajpizzedozamowienia(int numer) {
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt2 = con.createStatement();
            res2 = stmt2.executeQuery(
                    "select * from ZAMOWIENIE Z join SZCZ_O_PIZZY AS SP on Z.ID_ZAM=SP.ID_ZAM"
                    + " join MENU_PIZZA AS MP on SP.ID_PIZZY=MP.ID_PIZZY where Z.id_zam=" + numer
            );
            while (res2.next()) {
                int idszcz = res2.getInt("id_szcz_o_pizzy");
                int ilepizzy = res2.getInt("ile_sztuk_p");
                String pizza = ilepizzy + "";
                pizza += "x " + res2.getString("nazwa");
                pizza += " " + res2.getString("rozmiar");
                String ciasto = res2.getString("ciasto");
                if (ciasto.contains("grube")) {
                    pizza += " na grubym cieście";
                } else if (ciasto.contains("cienkie")) {
                    pizza += " na cienkim cieście";
                }
                pizza += "  " + dodajskladniki(idszcz, numer);
                model1.addElement(pizza);
            }
            lista.setModel(model1);
        } catch (SQLException ex) {
        }
    }

    String dodajskladniki(int idszcz, int numer) {
        String skladnik = "";
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt4 = con.createStatement();
            res4 = stmt4.executeQuery(
                    "select * from ZAMOWIENIE AS Z join SZCZ_O_PIZZY AS SP on Z.ID_ZAM=SP.ID_ZAM"
                    + " join SZCZ_O_SKL AS SS on SP.ID_SZCZ_O_PIZZY=SS.ID_SZCZ_O_PIZZY"
                    + " JOIN SKLADNIKI AS S ON SS.ID_SKLADNIKA=S.ID_SKLADNIKA"
                    + " where Z.id_zam=" + numer
                    + " and sp.id_szcz_o_pizzy=" + idszcz
            );
            while (res4.next()) {
                skladnik += "+ " + res4.getString("nazwa") + ", ";
            }
        } catch (SQLException ex) {

        }

        return skladnik;
    }

    void wyswietldane(DefaultTableModel model) {
        String insert = "select * from ZAMOWIENIE Z JOIN KLIENCI K ON Z.ID_KLIENTA=k.ID_KLIENTA JOIN PRACOWNICY P ON z.ID_PRAC=P.ID_PRAC order by id_ZAM";

        if (ost.isSelected() && zreal.isSelected() == false && pracowniki.getSelectedIndex() == 0 && niezreal.isSelected() == false && wszzam.isSelected() == false) {
            insert = "select * from ZAMOWIENIE Z JOIN KLIENCI K ON Z.ID_KLIENTA=k.ID_KLIENTA JOIN PRACOWNICY P ON z.ID_PRAC=P.ID_PRAC where id_zam=(select max(id_zam) from zamowienie) order by id_ZAM";
        } else if (pracowniki.getSelectedIndex() > 0 && zreal.isSelected() == false && niezreal.isSelected() == false && ost.isSelected() == false && wszzam.isSelected() == false) {
            insert = "select * from ZAMOWIENIE Z JOIN KLIENCI K ON Z.ID_KLIENTA=k.ID_KLIENTA JOIN PRACOWNICY P ON z.ID_PRAC=P.ID_PRAC where  login like '" + pracowniki.getSelectedItem().toString() + "' order by id_ZAM";
        } else if (zreal.isSelected() && pracowniki.getSelectedIndex() == 0 && niezreal.isSelected() == false && wszzam.isSelected() == false && ost.isSelected() == false) {
            insert = "select * from ZAMOWIENIE Z JOIN KLIENCI K ON Z.ID_KLIENTA=k.ID_KLIENTA JOIN PRACOWNICY P ON z.ID_PRAC=P.ID_PRAC where zrealizowane='T' order by id_ZAM";
        } else if (niezreal.isSelected() && pracowniki.getSelectedIndex() == 0 && zreal.isSelected() == false && wszzam.isSelected() == false && ost.isSelected() == false) {
            insert = "select * from ZAMOWIENIE Z JOIN KLIENCI K ON Z.ID_KLIENTA=k.ID_KLIENTA JOIN PRACOWNICY P ON z.ID_PRAC=P.ID_PRAC where zrealizowane='N' order by id_ZAM";
        } else if (ost.isSelected() && zreal.isSelected() && pracowniki.getSelectedIndex() == 0 && wszzam.isSelected() == false) {
            insert = "select * from ZAMOWIENIE Z JOIN KLIENCI K ON Z.ID_KLIENTA=k.ID_KLIENTA JOIN PRACOWNICY P ON z.ID_PRAC=P.ID_PRAC where id_zam=(select max(id_zam) from ZAMOWIENIE Z JOIN KLIENCI K ON Z.ID_KLIENTA=k.ID_KLIENTA JOIN PRACOWNICY P ON z.ID_PRAC=P.ID_PRAC where zrealizowane='T') order by id_ZAM";
        } else if (ost.isSelected() && niezreal.isSelected() && pracowniki.getSelectedIndex() == 0 && wszzam.isSelected() == false) {
            insert = "select * from ZAMOWIENIE Z JOIN KLIENCI K ON Z.ID_KLIENTA=k.ID_KLIENTA JOIN PRACOWNICY P ON z.ID_PRAC=P.ID_PRAC where id_zam=(select max(id_zam) from ZAMOWIENIE Z JOIN KLIENCI K ON Z.ID_KLIENTA=k.ID_KLIENTA JOIN PRACOWNICY P ON z.ID_PRAC=P.ID_PRAC where zrealizowane='N') order by id_ZAM";
        } else if (ost.isSelected() && pracowniki.getSelectedIndex() > 0 && zreal.isSelected() == false && wszzam.isSelected() == false) {
            insert = "select * from ZAMOWIENIE Z JOIN KLIENCI K ON Z.ID_KLIENTA=k.ID_KLIENTA JOIN PRACOWNICY P ON z.ID_PRAC=P.ID_PRAC WHERE id_zam=(select max(id_zam) from ZAMOWIENIE Z JOIN KLIENCI K ON Z.ID_KLIENTA=k.ID_KLIENTA JOIN PRACOWNICY P ON z.ID_PRAC=P.ID_PRAC  where login like '" + pracowniki.getSelectedItem().toString() + "') order by id_ZAM";
        } else if (zreal.isSelected() && pracowniki.getSelectedIndex() > 0 && wszzam.isSelected() == false && ost.isSelected() == false) {
            insert = "select * from ZAMOWIENIE Z JOIN KLIENCI K ON Z.ID_KLIENTA=k.ID_KLIENTA JOIN PRACOWNICY P ON z.ID_PRAC=P.ID_PRAC WHERE login  like '" + pracowniki.getSelectedItem().toString() + "' and zrealizowane='T' order by id_ZAM";
        } else if (niezreal.isSelected() && pracowniki.getSelectedIndex() > 0 && zreal.isSelected() == false && wszzam.isSelected() == false && ost.isSelected() == false) {
            insert = "select * from ZAMOWIENIE Z JOIN KLIENCI K ON Z.ID_KLIENTA=k.ID_KLIENTA JOIN PRACOWNICY P ON z.ID_PRAC=P.ID_PRAC WHERE login  like '" + pracowniki.getSelectedItem().toString() + "' and zrealizowane='N' order by id_ZAM";
        } else if (ost.isSelected() && niezreal.isSelected() && pracowniki.getSelectedIndex() > 0 && zreal.isSelected() == false && wszzam.isSelected() == false) {
            insert = "select * from ZAMOWIENIE Z JOIN KLIENCI K ON Z.ID_KLIENTA=k.ID_KLIENTA JOIN PRACOWNICY P ON z.ID_PRAC=P.ID_PRAC WHERE  id_zam= (select max(id_zam) from ZAMOWIENIE Z JOIN KLIENCI K ON Z.ID_KLIENTA=k.ID_KLIENTA JOIN PRACOWNICY P ON z.ID_PRAC=P.ID_PRAC WHERE login  like '" + pracowniki.getSelectedItem().toString() + "' and zrealizowane='N' ) and login  like '" + pracowniki.getSelectedItem().toString() + "' and zrealizowane='N' order by id_ZAM";
        } else if (ost.isSelected() && zreal.isSelected() && pracowniki.getSelectedIndex() > 0 && niezreal.isSelected() == false && wszzam.isSelected() == false) {
            insert = "select * from ZAMOWIENIE Z JOIN KLIENCI K ON Z.ID_KLIENTA=k.ID_KLIENTA JOIN PRACOWNICY P ON z.ID_PRAC=P.ID_PRAC WHERE id_zam= (select max(id_zam) from ZAMOWIENIE Z JOIN KLIENCI K ON Z.ID_KLIENTA=k.ID_KLIENTA JOIN PRACOWNICY P ON z.ID_PRAC=P.ID_PRAC WHERE login  like '" + pracowniki.getSelectedItem().toString() + "' and zrealizowane='T' ) and login  like '" + pracowniki.getSelectedItem().toString() + "' and zrealizowane='T'  order by id_ZAM";
        }

        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt1 = con.createStatement();
            res1 = stmt1.executeQuery(insert);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych");
        }
        try {
            while (res1.next()) {

                int nr = res1.getInt("id_ZAM");
                String klient = res1.getString("IMIE_NAZWISKO");
                String pracownik = res1.getString("login");
                String data = res1.getString("data_zam");
                String oplata = res1.getString("platnosc");
                if (oplata.equals("G")) {
                    oplata = "gotówka";
                } else {
                    oplata = "karta";
                }

                String realizacja = res1.getString("zrealizowane");
                if (realizacja.equals("N")) {
                    realizuj = false;
                } else {
                    realizuj = true;

                }
                String formazam = res1.getString("forma");
                if (formazam.equals("D")) {
                    formazam = "w dostawie";
                } else {
                    formazam = "w lokaju";
                }

                String wartosc = res1.getString("wartosc") + " zł";
                Object[] row = {nr, klient, pracownik, data, oplata, formazam, wartosc, realizuj};
                model.addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Edycja_pizzy.class.getName()).log(Level.SEVERE, null, ex);
        }
        tabelka.setModel(model);
    }

    void czysctabelke() {
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton anreal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList lista;
    private javax.swing.JLabel nadpis;
    private javax.swing.JLabel napis;
    private javax.swing.JToggleButton niezreal;
    private javax.swing.JToggleButton ost;
    private javax.swing.JPanel panel_tabelka;
    private javax.swing.JToggleButton powrot;
    private javax.swing.JComboBox pracowniki;
    private javax.swing.JToggleButton przegladaj;
    private javax.swing.JTable tabelka;
    private javax.swing.JButton usun;
    private javax.swing.JToggleButton wszzam;
    private javax.swing.JToggleButton zreal;
    private javax.swing.JButton zrealizuj;
    // End of variables declaration//GEN-END:variables
}
